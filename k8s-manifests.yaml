---
# ConfigMap for application configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: protrack-config
data:
  NODE_ENV: "production"
---
# Secret for database credentials
apiVersion: v1
kind: Secret
metadata:
  name: protrack-db-secret
type: Opaque
data:
  POSTGRES_USER: cG9zdGdyZXM=  # postgres
  POSTGRES_PASSWORD: cG9zdGdyZXM=  # postgres
  POSTGRES_DB: cHJvdHJhY2s=  # protrack
---
# Persistent Volume Claim for database storage
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
---
# Database Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: protrack-db
spec:
  selector:
    matchLabels:
      app: protrack-db
  replicas: 1
  template:
    metadata:
      labels:
        app: protrack-db
    spec:
      containers:
      - name: postgres
        image: postgres:16-alpine
        ports:
        - containerPort: 5432
        env:
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: protrack-db-secret
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: protrack-db-secret
              key: POSTGRES_PASSWORD
        - name: POSTGRES_DB
          valueFrom:
            secretKeyRef:
              name: protrack-db-secret
              key: POSTGRES_DB
        volumeMounts:
        - name: postgres-storage
          mountPath: /var/lib/postgresql/data
        readinessProbe:
          exec:
            command: ["pg_isready", "-U", "postgres"]
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 5
        livenessProbe:
          exec:
            command: ["pg_isready", "-U", "postgres"]
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
      volumes:
      - name: postgres-storage
        persistentVolumeClaim:
          claimName: postgres-pvc
---
# Database Service
apiVersion: v1
kind: Service
metadata:
  name: protrack-db
spec:
  selector:
    app: protrack-db
  ports:
  - port: 5432
    targetPort: 5432
---
# Application Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: protrack-app
spec:
  selector:
    matchLabels:
      app: protrack-app
  replicas: 1
  template:
    metadata:
      labels:
        app: protrack-app
    spec:
      containers:
      - name: app
        image: protrack-app:latest  # You'll need to build and push this image
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 3000
        env:
        - name: NODE_ENV
          valueFrom:
            configMapKeyRef:
              name: protrack-config
              key: NODE_ENV
        - name: DATABASE_URL
          value: postgresql://postgres:postgres@protrack-db:5432/protrack
        resources:
          limits:
            memory: "512Mi"
            cpu: "500m"
          requests:
            memory: "256Mi"
            cpu: "200m"
        readinessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 10
          periodSeconds: 5
        livenessProbe:
          httpGet:
            path: /
            port: 3000
          initialDelaySeconds: 15
          periodSeconds: 10
---
# Application Service
apiVersion: v1
kind: Service
metadata:
  name: protrack-app
spec:
  selector:
    app: protrack-app
  ports:
  - port: 80
    targetPort: 3000
---
# Ingress for external access
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: protrack-ingress
spec:
  rules:
  - host: protrack.example.com  # Replace with your domain
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: protrack-app
            port:
              number: 80 